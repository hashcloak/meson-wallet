/* automatically generated by rust-bindgen */
#![allow(non_camel_case_types)]
#![allow(dead_code)]
#[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
#[repr(C)]
pub struct __BindgenComplex<T> {
    pub re: T,
    pub im: T,
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _GoString_ {
    pub p: *const ::std::os::raw::c_char,
    pub n: isize,
}
#[test]
fn bindgen_test_layout__GoString_() {
    assert_eq!(
        ::std::mem::size_of::<_GoString_>(),
        16usize,
        concat!("Size of: ", stringify!(_GoString_))
    );
    assert_eq!(
        ::std::mem::align_of::<_GoString_>(),
        8usize,
        concat!("Alignment of ", stringify!(_GoString_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GoString_>())).p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_GoString_),
            "::",
            stringify!(p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_GoString_>())).n as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_GoString_),
            "::",
            stringify!(n)
        )
    );
}
pub type GoInt8 = ::std::os::raw::c_schar;
pub type GoUint8 = ::std::os::raw::c_uchar;
pub type GoInt16 = ::std::os::raw::c_short;
pub type GoUint16 = ::std::os::raw::c_ushort;
pub type GoInt32 = ::std::os::raw::c_int;
pub type GoUint32 = ::std::os::raw::c_uint;
pub type GoInt64 = ::std::os::raw::c_longlong;
pub type GoUint64 = ::std::os::raw::c_ulonglong;
pub type GoInt = GoInt64;
pub type GoUint = GoUint64;
pub type GoUintptr = size_t;
pub type GoFloat32 = f32;
pub type GoFloat64 = f64;
pub type GoComplex64 = __BindgenComplex<f32>;
pub type GoComplex128 = __BindgenComplex<f64>;
pub type _check_for_64_bit_pointer_matching_GoInt = [::std::os::raw::c_char; 1usize];
pub type GoString = _GoString_;
pub type GoMap = *mut ::std::os::raw::c_void;
pub type GoChan = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoInterface {
    pub t: *mut ::std::os::raw::c_void,
    pub v: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_GoInterface() {
    assert_eq!(
        ::std::mem::size_of::<GoInterface>(),
        16usize,
        concat!("Size of: ", stringify!(GoInterface))
    );
    assert_eq!(
        ::std::mem::align_of::<GoInterface>(),
        8usize,
        concat!("Alignment of ", stringify!(GoInterface))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoInterface>())).t as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GoInterface),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoInterface>())).v as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GoInterface),
            "::",
            stringify!(v)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GoSlice {
    pub data: *mut ::std::os::raw::c_void,
    pub len: GoInt,
    pub cap: GoInt,
}
#[test]
fn bindgen_test_layout_GoSlice() {
    assert_eq!(
        ::std::mem::size_of::<GoSlice>(),
        24usize,
        concat!("Size of: ", stringify!(GoSlice))
    );
    assert_eq!(
        ::std::mem::align_of::<GoSlice>(),
        8usize,
        concat!("Alignment of ", stringify!(GoSlice))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoSlice>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GoSlice),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoSlice>())).len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GoSlice),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<GoSlice>())).cap as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(GoSlice),
            "::",
            stringify!(cap)
        )
    );
}
extern "C" {
    pub fn Register(configFile: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn NewClient(service: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn NewSession();
}
extern "C" {
    pub fn GetService(service: *mut ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BlockingSendUnreliableMessage_return {
    pub r0: *mut ::std::os::raw::c_void,
    pub r1: GoInt32,
}
#[test]
fn bindgen_test_layout_BlockingSendUnreliableMessage_return() {
    assert_eq!(
        ::std::mem::size_of::<BlockingSendUnreliableMessage_return>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(BlockingSendUnreliableMessage_return)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<BlockingSendUnreliableMessage_return>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(BlockingSendUnreliableMessage_return)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BlockingSendUnreliableMessage_return>())).r0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockingSendUnreliableMessage_return),
            "::",
            stringify!(r0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<BlockingSendUnreliableMessage_return>())).r1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(BlockingSendUnreliableMessage_return),
            "::",
            stringify!(r1)
        )
    );
}
extern "C" {
    pub fn BlockingSendUnreliableMessage(
        messagePtr: *mut ::std::os::raw::c_void,
        messageLen: ::std::os::raw::c_int,
    ) -> BlockingSendUnreliableMessage_return;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SendUnreliableMessage_return {
    pub r0: *mut ::std::os::raw::c_void,
    pub r1: GoInt32,
}
#[test]
fn bindgen_test_layout_SendUnreliableMessage_return() {
    assert_eq!(
        ::std::mem::size_of::<SendUnreliableMessage_return>(),
        16usize,
        concat!("Size of: ", stringify!(SendUnreliableMessage_return))
    );
    assert_eq!(
        ::std::mem::align_of::<SendUnreliableMessage_return>(),
        8usize,
        concat!("Alignment of ", stringify!(SendUnreliableMessage_return))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SendUnreliableMessage_return>())).r0 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(SendUnreliableMessage_return),
            "::",
            stringify!(r0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<SendUnreliableMessage_return>())).r1 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(SendUnreliableMessage_return),
            "::",
            stringify!(r1)
        )
    );
}
extern "C" {
    pub fn SendUnreliableMessage(
        messagePtr: *mut ::std::os::raw::c_void,
        messageLen: ::std::os::raw::c_int,
    ) -> SendUnreliableMessage_return;
}
extern "C" {
    pub fn Shutdown();
}
extern "C" {
    pub fn ValidateReply(
        respPtr: *mut ::std::os::raw::c_void,
        respLen: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
